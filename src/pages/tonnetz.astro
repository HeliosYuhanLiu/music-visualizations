---
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import { Icon } from "astro-icon/components";

// Update the Tonnetz grid
const rows = 8;
const cols = 26; // Doubled from 13 to 26
const notes = [
  ["E♭", "B♭", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯"],
  ["G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D"],
  ["B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯"],
  ["D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯"],
  ["G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D"],
  ["B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯"],
  ["D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯"],
  ["G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D"],
  ["B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯"],
  ["D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯", "F", "C", "G", "D", "A", "E", "B", "F♯", "C♯", "G♯", "D♯", "A♯"],
];

// Increase the size of triangles and nodes
const triangleSize = 80; // Decreased from 100 to 80
const nodeRadius = 16; // Decreased from 20 to 16

// Calculate the height of an equilateral triangle
const triangleHeight = Math.sqrt(3) / 2 * triangleSize;

// Update SVG dimensions and viewBox
const svgWidth = cols * 1.5 * triangleSize;
const svgHeight = rows * triangleHeight - 30;
const horizontalShift = triangleSize * 0.75;

// Calculate the visible area
const visibleWidth = svgWidth;
const visibleHeight = svgHeight;

// Calculate the viewBox to show the entire Tonnetz
// Shift the viewBox to the left
const viewBoxX = svgWidth * 0.2; // Shift left by 20% of the SVG width
const viewBoxY = 20;
const viewBoxWidth = visibleWidth + 40;
const viewBoxHeight = visibleHeight + 40;

// Define available instruments
const instruments = ["piano", "guitar", "synth", "violin"];
---

<Layout title="Tonnetz">
  <Container class="max-w-full">
    <h1 class="text-4xl font-bold text-center my-8">Tonnetz</h1>
    <p class="text-center mb-8">Click on the nodes to play notes and explore the Tonnetz. Click on triangles to play chords. You can also use a MIDI keyboard or your computer keyboard (ASDFGHJ for white keys, WETYU for black keys).</p>
    
    <div class="flex justify-center items-start space-x-8">
      <div class="w-2/3 border border-gray-300 rounded-lg overflow-hidden">
        <svg id="tonnetzSvg" width={svgWidth} height={svgHeight} viewBox={`${viewBoxX} ${viewBoxY} ${viewBoxWidth} ${viewBoxHeight}`} preserveAspectRatio="xMidYMid meet">
          {/* Draw all triangles */}
          {notes.map((row, i) => 
            row.map((_, j) => (
              <g>
                <polygon
                  points={`${j * 1.5 * triangleSize + i * horizontalShift},${i * triangleHeight} 
                           ${(j + 0.5) * 1.5 * triangleSize + i * horizontalShift},${(i + 1) * triangleHeight} 
                           ${(j + 1) * 1.5 * triangleSize + i * horizontalShift},${i * triangleHeight}`}
                  class={`fill-transparent stroke-gray-400 hover:fill-blue-200 ${i % 2 === 0 ? 'hover:fill-indigo-700' : 'hover:fill-orange-500'}`}
                  onmousedown={`playChord('${notes[i][j]}', '${notes[i + 1] ? notes[i + 1][j] : ''}', '${notes[i][j + 1] || ''}')`}
                  onmouseup={`stopChord('${notes[i][j]}', '${notes[i + 1] ? notes[i + 1][j] : ''}', '${notes[i][j + 1] || ''}')`}
                  onmouseleave={`stopChord('${notes[i][j]}', '${notes[i + 1] ? notes[i + 1][j] : ''}', '${notes[i][j + 1] || ''}')`}
                />
                <polygon
                  points={`${j * 1.5 * triangleSize + i * horizontalShift},${i * triangleHeight} 
                           ${(j + 0.5) * 1.5 * triangleSize + i * horizontalShift},${(i - 1) * triangleHeight} 
                           ${(j + 1) * 1.5 * triangleSize + i * horizontalShift},${i * triangleHeight}`}
                  class={`fill-transparent stroke-gray-400 hover:fill-blue-200 ${i % 2 === 1 ? 'hover:fill-indigo-700' : 'hover:fill-orange-500'}`}
                  onmousedown={`playChord('${notes[i][j]}', '${notes[i - 1] ? notes[i - 1][j + 1] : ''}', '${notes[i][j + 1] || ''}')`}
                  onmouseup={`stopChord('${notes[i][j]}', '${notes[i - 1] ? notes[i - 1][j + 1] : ''}', '${notes[i][j + 1] || ''}')`}
                  onmouseleave={`stopChord('${notes[i][j]}', '${notes[i - 1] ? notes[i - 1][j + 1] : ''}', '${notes[i][j + 1] || ''}')`}
                />
              </g>
            ))
          )}
          {/* Draw all circles */}
          {notes.map((row, i) => 
            row.map((note, j) => (
              <circle
                cx={j * 1.5 * triangleSize + i * horizontalShift}
                cy={i * triangleHeight}
                r={nodeRadius}
                class="fill-white stroke-black stroke-2 cursor-pointer"
                onmousedown={`playNote('${note}')`}
                onmouseup={`stopNote('${note}')`}
                onmouseleave={`stopNote('${note}')`}
                data-note={note}
              />
            ))
          )}
          {/* Draw all text */}
          {notes.map((row, i) => 
            row.map((note, j) => (
              <text
                x={j * 1.5 * triangleSize + i * horizontalShift}
                y={i * triangleHeight + 5}
                text-anchor="middle"
                class="fill-black font-bold pointer-events-none text-sm"
              >{note}</text>
            ))
          )}
        </svg>
      </div>
      
      <div class="w-1/4 border border-gray-300 rounded-lg p-4">
        <h2 class="text-2xl font-bold mb-4">Sound Settings</h2>
        <div class="mb-4">
          <label for="instrument" class="block text-sm font-medium text-gray-700">Instrument</label>
          <select id="instrument" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
            {instruments.map((instrument) => (
              <option value={instrument}>{instrument.charAt(0).toUpperCase() + instrument.slice(1)}</option>
            ))}
          </select>
        </div>
        <div class="mb-4">
          <label for="volume" class="block text-sm font-medium text-gray-700">Volume</label>
          <input type="range" id="volume" name="volume" min="0" max="1" step="0.1" value="0.5" class="w-full">
        </div>
        <div class="mb-4">
          <label for="duration" class="block text-sm font-medium text-gray-700">Note Duration (seconds)</label>
          <input type="number" id="duration" name="duration" min="0.1" max="2" step="0.1" value="0.5" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
        </div>
      </div>
    </div>
  </Container>
</Layout>

<script>
  // Create an AudioContext
  const audioContext = new (window.AudioContext || window.webkitAudioContext)();

  // Object to store active oscillators
  const activeOscillators = {};

  // Function to play a note using the Web Audio API
  window.playNote = (note) => {
    if (activeOscillators[note]) return; // If the note is already playing, do nothing

    const instrument = document.getElementById('instrument').value;
    const volume = parseFloat(document.getElementById('volume').value);

    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();

    oscillator.type = getOscillatorType(instrument);
    oscillator.frequency.setValueAtTime(noteToFrequency(note), audioContext.currentTime);

    gainNode.gain.setValueAtTime(volume, audioContext.currentTime);

    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);

    oscillator.start();

    // Store the oscillator and gain node
    activeOscillators[note] = { oscillator, gainNode };

    // Highlight all nodes with the same note
    const nodes = document.querySelectorAll(`circle[data-note="${note}"]`);
    nodes.forEach(node => {
      node.classList.add('fill-yellow-300');
    });
  };

  // Function to stop playing a note
  window.stopNote = (note) => {
    if (activeOscillators[note]) {
      const { oscillator, gainNode } = activeOscillators[note];


      // Stop the oscillator after the fade-out
      oscillator.stop();

      // Remove the oscillator from active oscillators after it's stopped
      delete activeOscillators[note];

      // Remove highlight from nodes
      const nodes = document.querySelectorAll(`circle[data-note="${note}"]`);
      nodes.forEach(node => {
        node.classList.remove('fill-yellow-300');
      });
    }
  };

  // Function to play a chord (three notes simultaneously)
  window.playChord = (note1, note2, note3) => {
    playNote(note1);
    playNote(note2);
    playNote(note3);
  };

  // Function to stop a chord
  window.stopChord = (note1, note2, note3) => {
    stopNote(note1);
    stopNote(note2);
    stopNote(note3);
  };

  // Function to get oscillator type based on instrument
  function getOscillatorType(instrument) {
    switch (instrument) {
      case 'piano':
        return 'triangle';
      case 'guitar':
        return 'sawtooth';
      case 'synth':
        return 'square';
      case 'violin':
        return 'sine';
      default:
        return 'sine';
    }
  }

  // Function to convert note names to frequencies
  function noteToFrequency(note) {
    const noteMap = {
      'C': 261.63, 'C♯': 277.18, 'D': 293.66, 'D♯': 311.13,
      'E': 329.63, 'F': 349.23, 'F♯': 369.99, 'G': 392.00,
      'G♯': 415.30, 'A': 440.00, 'A♯': 466.16, 'B': 493.88,
      'A♭': 415.30, 'E♭': 311.13, 'B♭': 466.16
    };
    return noteMap[note] || 440;
  }

  // Function to convert MIDI note number to note name
  function midiNoteToNoteName(midiNote) {
    const noteNames = ['C', 'C♯', 'D', 'D♯', 'E', 'F', 'F♯', 'G', 'G♯', 'A', 'A♯', 'B'];
    return noteNames[midiNote % 12];
  }

  // Function to handle MIDI input
  function onMIDIMessage(message) {
    const command = message.data[0];
    const note = message.data[1];
    const velocity = (message.data.length > 2) ? message.data[2] : 0;

    const noteName = midiNoteToNoteName(note);

    if (command === 144 && velocity > 0) {
      // Note on
      console.log(`MIDI Note On: ${noteName} (MIDI note number: ${note})`);
      playNote(noteName);
    } else if (command === 128 || (command === 144 && velocity === 0)) {
      // Note off
      console.log(`MIDI Note Off: ${noteName} (MIDI note number: ${note})`);
      // If you want to implement note off behavior, you can do it here
    }
  }

  // Request MIDI access
  if (navigator.requestMIDIAccess) {
    navigator.requestMIDIAccess()
      .then(onMIDISuccess, onMIDIFailure);
  } else {
    console.log("WebMIDI is not supported in this browser.");
  }

  function onMIDISuccess(midiAccess) {
    for (var input of midiAccess.inputs.values()) {
      input.onmidimessage = onMIDIMessage;
    }
  }

  function onMIDIFailure() {
    console.log("Could not access your MIDI devices.");
  }

  // Keyboard mapping
  const keyboardMap = {
    'a': 'C', 's': 'D', 'd': 'E', 'f': 'F', 'g': 'G', 'h': 'A', 'j': 'B',
    'w': 'C♯', 'e': 'D♯', 't': 'F♯', 'y': 'G♯', 'u': 'A♯'
  };

  // Add event listener for keydown
  document.addEventListener('keydown', (event) => {
    const key = event.key.toLowerCase();
    if (keyboardMap[key] && !event.repeat) {
      playNote(keyboardMap[key]);
    }
  });

  // Add event listener for keyup
  document.addEventListener('keyup', (event) => {
    const key = event.key.toLowerCase();
    if (keyboardMap[key]) {
      stopNote(keyboardMap[key]);
    }
  });

</script>
